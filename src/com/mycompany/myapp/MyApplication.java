package com.mycompany.myapp;


import com.codename1.components.ImageViewer;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.FlowLayout;
import com.mycompany.GUI.Evenements.Client_Liste_Events;
import com.mycompany.GUI.Produits.HomeProduitsForm;



/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {
     private Resources res;
    private Form currentForm;
    private Container tabletSurface;
    private Command gridCommand;
    private Command listCommand;

    private Object imageMask;
    private int maskWidth;
    private int maskHeight;
    private Object circleMask;
    private int circleMaskWidth;
    private int circleMaskHeight;

    private int[] colors;
    private Image[] colorBottoms;
    private int currentColor;

    private Form current;
    private Resources theme;
    private Form Home;
    private Form about;
      private EncodedImage enc;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    public class SplashScreen extends Form {

    public SplashScreen() throws IOException{
        
          this.getStyle().setBgColor(0xE6E6E6);
          this.getStyle().setBgImage(theme.getImage("e23fc54d7e3d96acebbb9c736fe92ef25efa93f7_Luminaire Goutte orientle 1 2 3 4  (8) 3.jpg"));
  //  this.setBgImage( theme.getImage("e23fc54d7e3d96acebbb9c736fe92ef25efa93f7_Luminaire Goutte orientle 1 2 3 4  (8) 3.jpg"));
    } 
    }
   
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        
        Home = (Form) new Form(new FlowLayout(Component.CENTER, Component.CENTER));
        about = (Form) new Form(new FlowLayout(Component.CENTER));
        Label lab1 = new  Label("Welcome Nader");
        Home.add(lab1);
        ImageViewer img=  new ImageViewer();
        Form connection = (Form) new Form(new FlowLayout(Component.CENTER, Component.CENTER));
        Container c = new Container();
        
          Toolbar tb = Home.getToolbar();
         tb.addMaterialCommandToSideMenu("Home",FontImage.MATERIAL_HOME,new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                Home.show();
            }
        });
             tb.addMaterialCommandToSideMenu("Evenement",FontImage.MATERIAL_EVENT,new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                 Client_Liste_Events h = new Client_Liste_Events();
        h.getF().show();
            }
        }); 
            
        SplashScreen sps;
        /*try {
        sps = new SplashScreen();
        sps.show();
        } catch (IOException ex) {
        }*/
        
       // LoginForm lf = new LoginForm();
       // lf.getMain().show();
       
        HomeProduitsForm hpf = new HomeProduitsForm();
        hpf.getF().show();
        
        // after splash
        /*new java.util.Timer().schedule(
        new java.util.TimerTask() {
        @Override
        public void run() {
        
        /* Client_Liste_Events h = new Client_Liste_Events();
        h.getF().show();*/
        /* Vendeur_Evenet ve = new Vendeur_Evenet();
        ve.getFv().show();*/
  
        /*   Client_List_Promotions p = new Client_List_Promotions();
        p.getF().show();*/
        /*Contact co = new Contact();
        co.Contact();*/
      //  HomePage h = new HomePage();
       // h.getHome().show();
        /* HomeProduitsForm hp = new HomeProduitsForm();
        hp.getF().show();*/
        /* HomeStatsPanier hs = new HomeStatsPanier();
        hs.getStatsForm().show();*/
        /*
        VendeurCommandesForm vcf;
        try {
        vcf = new VendeurCommandesForm();
        vcf.getPsdTutorial().show();
        } catch (IOException ex) {
        }
  
       /*   Client_List_Promotions p = new Client_List_Promotions();
       p.getF().show();*/
       /*Contact co = new Contact();
       co.Contact();*/

      

        
    }


    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

    public Form getHome() {
        return Home;
    }

    public void setHome(Form Home) {
        this.Home = Home;
    }

    public Form getAbout() {
        return about;
    }

    public void setAbout(Form about) {
        this.about = about;
    }

}
