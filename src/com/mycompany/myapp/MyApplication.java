package com.mycompany.myapp;


import com.codename1.components.ImageViewer;
import com.codename1.components.ScaleImageLabel;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.Button;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import com.codename1.ui.TextField;
import com.codename1.ui.URLImage;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.plaf.Style;
import com.mycompany.GUI.Decouverte.Contact;
import com.mycompany.GUI.Evenements.Client_Liste_Events;
import com.mycompany.GUI.Evenements.Vendeur_Evenet;
import com.mycompany.GUI.Promotions.Client_List_Promotions;
import com.mycompany.GUI.Utilisateurs.LogIn;
import com.mycompany.entites.Promotions.Promotions;
import com.mycompany.service.Promotions.ServicePrommotion;
import java.util.Date;


/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {
     private Resources res;
    private Form currentForm;
    private Container tabletSurface;
    private Command gridCommand;
    private Command listCommand;

    private Object imageMask;
    private int maskWidth;
    private int maskHeight;
    private Object circleMask;
    private int circleMaskWidth;
    private int circleMaskHeight;

    private int[] colors;
    private Image[] colorBottoms;
    private int currentColor;

    private Form current;
    private Resources theme;
    private Form Home;
    private Form about;
      private EncodedImage enc;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    public class SplashScreen extends Form {

    public SplashScreen() throws IOException{
        
          this.getStyle().setBgColor(0xE6E6E6);
    this.setBgImage( theme.getImage("e23fc54d7e3d96acebbb9c736fe92ef25efa93f7_Luminaire Goutte orientle 1 2 3 4  (8) 3.jpg"));
    } 
    }
    private void showSplashAnimation() throws IOException {
        
             
        Form splash = new Form(new LayeredLayout());
        splash.setUIID("Splash");
        
        splash.getContentPane().setUIID("Container");
        splash.getToolbar().setUIID("Container");
        ScaleImageLabel iconBackground = new ScaleImageLabel(res.getImage("e23fc54d7e3d96acebbb9c736fe92ef25efa93f7_Luminaire Goutte orientle 1 2 3 4  (8) 3.jpg"));
        iconBackground.setBackgroundType(Style.BACKGROUND_IMAGE_SCALED_FILL);
        Container centerBackground = BorderLayout.center(iconBackground);
        splash.add(centerBackground);
        Label iconForeground = new Label(res.getImage("codenameone-icon-foreground.png"));
        Container centerIcon = BorderLayout.centerAbsolute(iconForeground);
        splash.add(centerIcon);
        
        splash.show();
        callSerially(() -> {
            ((BorderLayout)centerBackground.getLayout()).setCenterBehavior(CENTER_BEHAVIOR_CENTER_ABSOLUTE);
            centerBackground.setShouldCalcPreferredSize(true);
            centerBackground.animateLayoutAndWait(350);
            
            iconForeground.remove();
            iconBackground.remove();
            centerIcon.remove();
            Container layers = LayeredLayout.encloseIn(
                    new Label(iconBackground.getIcon(), "CenterIcon"), 
                    new Label(iconForeground.getIcon(), "CenterIcon"));
            Container boxy = BoxLayout.encloseY(layers);
            Label placeholder = new Label();
            placeholder.setShowEvenIfBlank(true);
            Label kitchenSink = new Label("KitchenSink", "SplashTitle");
            Component.setSameHeight(placeholder, kitchenSink);
            Component.setSameWidth(placeholder, kitchenSink, boxy);
            centerBackground.add(CENTER, boxy);
            splash.revalidate();
            callSerially(() -> {
                placeholder.setText(" ");
                boxy.add(placeholder);
                boxy.setShouldCalcPreferredSize(true);
                boxy.getParent().animateLayoutAndWait(400);
                boxy.replaceAndWait(placeholder, kitchenSink, CommonTransitions.createFade(500));
                
                Label newPlaceholder = new Label(" ");
                Label byCodenameOne = new Label("by Codename One", "SplashSubTitle");
                Component.setSameHeight(newPlaceholder, byCodenameOne);
                Component.setSameWidth(newPlaceholder, byCodenameOne);
                boxy.add(newPlaceholder);
                boxy.getParent().animateLayoutAndWait(400);
                boxy.replaceAndWait(newPlaceholder, byCodenameOne, CommonTransitions.createFade(500));
                
                byCodenameOne.setY(splash.getHeight());                
                kitchenSink.setY(splash.getHeight());
                layers.setY(splash.getHeight());
                boxy.setHeight(splash.getHeight());
                
                boxy.animateUnlayoutAndWait(450, 20);
                splash.setTransitionOutAnimator(CommonTransitions.createEmpty());
                
                // create image masks for card effects
                Image mask = res.getImage("card-full.png");
                maskWidth = mask.getWidth();
                maskHeight = mask.getHeight() / 4 * 3;
                Image top = mask.subImage(0, 0, maskWidth, maskHeight, true);
                Image bottom = mask.subImage(0, maskHeight, maskWidth, mask.getHeight() / 4, true);
                imageMask = top.createMask();
                
                Image circleMaskImage = res.getImage("circle.png");
                circleMask = circleMaskImage.createMask();
                circleMaskWidth = circleMaskImage.getWidth();
                circleMaskHeight = circleMaskImage.getHeight();
                
                colorBottoms = new Image[7];
                colors = new int[colorBottoms.length];
                Object bottomMask = bottom.createMask();
                for(int iter = 0 ; iter < colorBottoms.length ; iter++) {
                    colors[iter] = splash.getUIManager().getComponentStyle("Blank" + (iter + 1)).getBgColor();
                    colorBottoms[iter] = Image.createImage(bottom.getWidth(), bottom.getHeight(), 0xff000000 | colors[iter]);
                    colorBottoms[iter] = colorBottoms[iter].applyMask(bottomMask);
                }
                
                
            });
        });

    }
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        
        Home = (Form) new Form(new FlowLayout(Component.CENTER, Component.CENTER));
        about = (Form) new Form(new FlowLayout(Component.CENTER));
        Label lab1 = new  Label("Welcome Nader");
        Home.add(lab1);
        ImageViewer img=  new ImageViewer();
        Form connection = (Form) new Form(new FlowLayout(Component.CENTER, Component.CENTER));
        Container c = new Container();
        
          Toolbar tb = Home.getToolbar();
         tb.addMaterialCommandToSideMenu("Home",FontImage.MATERIAL_HOME,new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                Home.show();
            }
        });
             tb.addMaterialCommandToSideMenu("Evenement",FontImage.MATERIAL_EVENT,new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                 Client_Liste_Events h = new Client_Liste_Events();
        h.getF().show();
            }
        }); 
            
        SplashScreen sps;
         try {
             sps = new SplashScreen();
             sps.show();
         } catch (IOException ex) {
         }
        
        // after splash
        new java.util.Timer().schedule( 
        new java.util.TimerTask() {
            @Override
            public void run() {
             
                /* Client_Liste_Events h = new Client_Liste_Events();
                h.getF().show();*/
       /* Vendeur_Evenet ve = new Vendeur_Evenet();
        ve.getFv().show();*/
          Client_List_Promotions p = new Client_List_Promotions();
       p.getF().show();
       /*Contact co = new Contact();
       co.Contact();*/
            }
        }, 
        2000 
);
        
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

    public Form getHome() {
        return Home;
    }

    public void setHome(Form Home) {
        this.Home = Home;
    }

    public Form getAbout() {
        return about;
    }

    public void setAbout(Form about) {
        this.about = about;
    }

}
